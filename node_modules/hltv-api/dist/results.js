"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResults = void 0;
const cheerio_1 = __importDefault(require("cheerio"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const config_1 = require("./config");
function getResults() {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `${config_1.CONFIG.BASE}${config_1.CONFIG.RESULTS}`;
        try {
            const body = yield (yield node_fetch_1.default(url, {
                headers: { 'User-Agent': 'node-fetch' },
            })).text();
            const $ = cheerio_1.default.load(body, {
                normalizeWhitespace: true,
            });
            const results = [];
            const resultElements = $('.allres .result-con');
            $(resultElements).each((_i, element) => {
                const el = $(element).find('tr');
                const timestamp = Number(el.parents('.result-con').attr('data-zonedgrouping-entry-unix'));
                const time = new Date(timestamp).toISOString();
                const team1 = el.children('.team-cell').first();
                const team2 = el.children('.team-cell').last();
                const matchId = $(element).children('a').attr('href');
                const maps = el.find('.map-text');
                const result1 = el.find('.result-score').children('span').first();
                const result2 = el.find('.result-score').children('span').last();
                const objData = {
                    event: el.find('.event-name').text(),
                    maps: maps.text(),
                    time,
                    team1: {
                        name: team1.find('.team').text(),
                        crest: team1.find('img').attr('src'),
                        result: parseInt(result1.text(), 10),
                    },
                    team2: {
                        name: team2.find('.team').text(),
                        crest: team2.find('img').attr('src'),
                        result: parseInt(result2.text(), 10),
                    },
                    matchId,
                };
                results.push(objData);
            });
            if (!results.length) {
                throw new Error('There are no results available, something went wrong. Please contact the library maintainer on https://github.com/dajk/hltv-api');
            }
            return results;
        }
        catch (error) {
            throw new Error(error);
        }
    });
}
exports.getResults = getResults;
//# sourceMappingURL=results.js.map